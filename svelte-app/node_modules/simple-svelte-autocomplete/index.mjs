function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.data !== data)
        text.data = data;
}
function set_input_value(input, value) {
    if (value != null || input.value) {
        input.value = value;
    }
}
class HtmlTag {
    constructor(html, anchor = null) {
        this.e = element('div');
        this.a = anchor;
        this.u(html);
    }
    m(target, anchor = null) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert(target, this.n[i], anchor);
        }
        this.t = target;
    }
    u(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.childNodes);
    }
    p(html) {
        this.d();
        this.u(html);
        this.m(this.t, this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}

let current_component;
function set_current_component(component) {
    current_component = component;
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function flush() {
    const seen_callbacks = new Set();
    do {
        // first, call beforeUpdate functions
        // and update components
        while (dirty_components.length) {
            const component = dirty_components.shift();
            set_current_component(component);
            update(component.$$);
        }
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                callback();
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
}
function update($$) {
    if ($$.fragment) {
        $$.update($$.dirty);
        run_all($$.before_update);
        $$.fragment.p($$.dirty, $$.ctx);
        $$.dirty = null;
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}

const globals = (typeof window !== 'undefined' ? window : global);
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    if (component.$$.fragment) {
        run_all(component.$$.on_destroy);
        component.$$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        component.$$.on_destroy = component.$$.fragment = null;
        component.$$.ctx = {};
    }
}
function make_dirty(component, key) {
    if (!component.$$.dirty) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty = blank_object();
    }
    component.$$.dirty[key] = true;
}
function init(component, options, instance, create_fragment, not_equal, prop_names) {
    const parent_component = current_component;
    set_current_component(component);
    const props = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props: prop_names,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty: null
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, props, (key, ret, value = ret) => {
            if ($$.ctx && not_equal($$.ctx[key], $$.ctx[key] = value)) {
                if ($$.bound[key])
                    $$.bound[key](value);
                if (ready)
                    make_dirty(component, key);
            }
            return ret;
        })
        : props;
    $$.update();
    ready = true;
    run_all($$.before_update);
    $$.fragment = create_fragment($$.ctx);
    if (options.target) {
        if (options.hydrate) {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment.l(children(options.target));
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

/* src/SimpleAutocomplete.svelte generated by Svelte v3.12.1 */
const { Object: Object_1 } = globals;

function add_css() {
	var style = element("style");
	style.id = 'svelte-gfsz5d-style';
	style.textContent = ".autocomplete.svelte-gfsz5d{min-width:200px}.autocomplete.svelte-gfsz5d .svelte-gfsz5d{box-sizing:border-box}.autocomplete-input.svelte-gfsz5d{font:inherit;width:100%;height:100%;padding:5px 11px}.autocomplete-list.svelte-gfsz5d{background:#fff;position:relative;width:100%;overflow-y:auto;z-index:99;padding:10px 0;top:0px;border:1px solid #999;max-height:calc(15 * (1rem + 10px) + 15px);user-select:none}.autocomplete-list.svelte-gfsz5d:empty{padding:0}.autocomplete-list-item.svelte-gfsz5d{padding:5px 15px;color:#333;cursor:pointer;line-height:1}.autocomplete-list-item.svelte-gfsz5d:hover,.autocomplete-list-item.selected.svelte-gfsz5d{background-color:#2e69e2;color:#fff}.autocomplete-list-item-no-results.svelte-gfsz5d{padding:5px 15px;color:#999;line-height:1}.autocomplete-list.hidden.svelte-gfsz5d{display:none}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = Object_1.create(ctx);
	child_ctx.listItem = list[i];
	child_ctx.i = i;
	return child_ctx;
}

// (631:28) 
function create_if_block_4(ctx) {
	var div, t;

	return {
		c() {
			div = element("div");
			t = text(ctx.noResultsText);
			attr(div, "class", "autocomplete-list-item-no-results svelte-gfsz5d");
		},

		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t);
		},

		p(changed, ctx) {
			if (changed.noResultsText) {
				set_data(t, ctx.noResultsText);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

// (611:4) {#if filteredListItems && filteredListItems.length > 0}
function create_if_block(ctx) {
	var t, if_block_anchor;

	let each_value = ctx.filteredListItems;

	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	var if_block = (ctx.maxItemsToShowInList > 0 && ctx.filteredListItems.length > ctx.maxItemsToShowInList) && create_if_block_1(ctx);

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},

		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},

		p(changed, ctx) {
			if (changed.maxItemsToShowInList || changed.highlightIndex || changed.filteredListItems) {
				each_value = ctx.filteredListItems;

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(changed, child_ctx);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(t.parentNode, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}
				each_blocks.length = each_value.length;
			}

			if (ctx.maxItemsToShowInList > 0 && ctx.filteredListItems.length > ctx.maxItemsToShowInList) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		d(detaching) {
			destroy_each(each_blocks, detaching);

			if (detaching) {
				detach(t);
			}

			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

// (613:8) {#if maxItemsToShowInList <= 0 || i < maxItemsToShowInList}
function create_if_block_2(ctx) {
	var div, div_class_value, dispose;

	function select_block_type_1(changed, ctx) {
		if (ctx.listItem.highlighted) return create_if_block_3;
		return create_else_block;
	}

	var current_block_type = select_block_type_1(null, ctx);
	var if_block = current_block_type(ctx);

	function click_handler() {
		return ctx.click_handler(ctx);
	}

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", div_class_value = "autocomplete-list-item " + (ctx.i === ctx.highlightIndex ? 'selected' : '') + " svelte-gfsz5d");
			dispose = listen(div, "click", click_handler);
		},

		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},

		p(changed, new_ctx) {
			ctx = new_ctx;
			if (current_block_type === (current_block_type = select_block_type_1(changed, ctx)) && if_block) {
				if_block.p(changed, ctx);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);
				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}

			if ((changed.highlightIndex) && div_class_value !== (div_class_value = "autocomplete-list-item " + (ctx.i === ctx.highlightIndex ? 'selected' : '') + " svelte-gfsz5d")) {
				attr(div, "class", div_class_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(div);
			}

			if_block.d();
			dispose();
		}
	};
}

// (619:12) {:else}
function create_else_block(ctx) {
	var html_tag, raw_value = ctx.listItem.label + "";

	return {
		c() {
			html_tag = new HtmlTag(raw_value, null);
		},

		m(target, anchor) {
			html_tag.m(target, anchor);
		},

		p(changed, ctx) {
			if ((changed.filteredListItems) && raw_value !== (raw_value = ctx.listItem.label + "")) {
				html_tag.p(raw_value);
			}
		},

		d(detaching) {
			if (detaching) {
				html_tag.d();
			}
		}
	};
}

// (617:12) {#if listItem.highlighted}
function create_if_block_3(ctx) {
	var html_tag, raw_value = ctx.listItem.highlighted.label + "";

	return {
		c() {
			html_tag = new HtmlTag(raw_value, null);
		},

		m(target, anchor) {
			html_tag.m(target, anchor);
		},

		p(changed, ctx) {
			if ((changed.filteredListItems) && raw_value !== (raw_value = ctx.listItem.highlighted.label + "")) {
				html_tag.p(raw_value);
			}
		},

		d(detaching) {
			if (detaching) {
				html_tag.d();
			}
		}
	};
}

// (612:6) {#each filteredListItems as listItem, i}
function create_each_block(ctx) {
	var if_block_anchor;

	var if_block = (ctx.maxItemsToShowInList <= 0 || ctx.i < ctx.maxItemsToShowInList) && create_if_block_2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},

		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},

		p(changed, ctx) {
			if (ctx.maxItemsToShowInList <= 0 || ctx.i < ctx.maxItemsToShowInList) {
				if (if_block) {
					if_block.p(changed, ctx);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},

		d(detaching) {
			if (if_block) if_block.d(detaching);

			if (detaching) {
				detach(if_block_anchor);
			}
		}
	};
}

// (626:6) {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}
function create_if_block_1(ctx) {
	var div, t0, t1_value = ctx.filteredListItems.length - ctx.maxItemsToShowInList + "", t1, t2;

	return {
		c() {
			div = element("div");
			t0 = text("...");
			t1 = text(t1_value);
			t2 = text(" results not shown");
			attr(div, "class", "autocomplete-list-item-no-results svelte-gfsz5d");
		},

		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
		},

		p(changed, ctx) {
			if ((changed.filteredListItems || changed.maxItemsToShowInList) && t1_value !== (t1_value = ctx.filteredListItems.length - ctx.maxItemsToShowInList + "")) {
				set_data(t1, t1_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

function create_fragment(ctx) {
	var div1, input_1, t, div0, div0_class_value, div1_class_value, dispose;

	function select_block_type(changed, ctx) {
		if (ctx.filteredListItems && ctx.filteredListItems.length > 0) return create_if_block;
		if (ctx.noResultsText) return create_if_block_4;
	}

	var current_block_type = select_block_type(null, ctx);
	var if_block = current_block_type && current_block_type(ctx);

	return {
		c() {
			div1 = element("div");
			input_1 = element("input");
			t = space();
			div0 = element("div");
			if (if_block) if_block.c();
			attr(input_1, "type", "text");
			attr(input_1, "class", "input autocomplete-input svelte-gfsz5d");
			attr(input_1, "placeholder", ctx.placeholder);
			attr(input_1, "name", ctx.name);
			input_1.disabled = ctx.disabled;
			attr(input_1, "title", ctx.title);
			attr(div0, "class", div0_class_value = "autocomplete-list " + (ctx.opened ? '' : 'hidden') + " is-fullwidth" + " svelte-gfsz5d");
			attr(div1, "class", div1_class_value = "" + ctx.className + " autocomplete select is-fullwidth " + ctx.uniqueId + " svelte-gfsz5d");

			dispose = [
				listen(window, "click", ctx.onDocumentClick),
				listen(input_1, "input", ctx.input_1_input_handler),
				listen(input_1, "input", ctx.onInput),
				listen(input_1, "focus", ctx.onFocus),
				listen(input_1, "keydown", ctx.onKeyDown),
				listen(input_1, "click", ctx.onInputClick),
				listen(input_1, "keypress", ctx.onKeyPress)
			];
		},

		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, input_1);

			set_input_value(input_1, ctx.text);

			ctx.input_1_binding(input_1);
			append(div1, t);
			append(div1, div0);
			if (if_block) if_block.m(div0, null);
			ctx.div0_binding(div0);
		},

		p(changed, ctx) {
			if (changed.text && (input_1.value !== ctx.text)) set_input_value(input_1, ctx.text);

			if (changed.placeholder) {
				attr(input_1, "placeholder", ctx.placeholder);
			}

			if (changed.name) {
				attr(input_1, "name", ctx.name);
			}

			if (changed.disabled) {
				input_1.disabled = ctx.disabled;
			}

			if (changed.title) {
				attr(input_1, "title", ctx.title);
			}

			if (current_block_type === (current_block_type = select_block_type(changed, ctx)) && if_block) {
				if_block.p(changed, ctx);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);
				if (if_block) {
					if_block.c();
					if_block.m(div0, null);
				}
			}

			if ((changed.opened) && div0_class_value !== (div0_class_value = "autocomplete-list " + (ctx.opened ? '' : 'hidden') + " is-fullwidth" + " svelte-gfsz5d")) {
				attr(div0, "class", div0_class_value);
			}

			if ((changed.className) && div1_class_value !== (div1_class_value = "" + ctx.className + " autocomplete select is-fullwidth " + ctx.uniqueId + " svelte-gfsz5d")) {
				attr(div1, "class", div1_class_value);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			if (detaching) {
				detach(div1);
			}

			ctx.input_1_binding(null);
			if (if_block) if_block.d();
			ctx.div0_binding(null);
			run_all(dispose);
		}
	};
}

function safeStringFunction(theFunction, argument) {
  if (typeof theFunction !== "function") {
    console.error(
      "Not a function: " + theFunction + ", argument: " + argument
    );
  }
  let originalResult;
  try {
    originalResult = theFunction(argument);
  } catch (error) {
    console.warn(
      "Error executing Autocomplete function on value: " +
        argument +
        " function: " +
        theFunction
    );
  }
  let result = originalResult;
  if (result === undefined || result === null) {
    result = "";
  }
  if (typeof result !== "string") {
    result = result.toString();
  }
  return result;
}

function instance($$self, $$props, $$invalidate) {
	// the list of items  the user can select from
  let { items, labelFieldName = undefined, keywordsFieldName = labelFieldName, valueFieldName = undefined, labelFunction = function(item) {
    if (item === undefined || item === null) {
      return "";
    }
    return labelFieldName ? item[labelFieldName] : item;
  } } = $$props;

  let { keywordsFunction = function(item) {
    if (item === undefined || item === null) {
      return "";
    }
    return keywordsFieldName ? item[keywordsFieldName] : item;
  } } = $$props;

  let { valueFunction = function(item) {
    if (item === undefined || item === null) {
      return item;
    }
    return valueFieldName ? item[valueFieldName] : item;
  } } = $$props;

  let { keywordsCleanFunction = function(keywords) {
    return keywords;
  } } = $$props;

  let { textCleanFunction = function(userEnteredText) {
    return userEnteredText;
  } } = $$props;

  let { beforeChange = function(oldSelectedItem, newSelectedItem) {
    return true;
  } } = $$props;
  let { onChange = function(newSelectedItem) {} } = $$props;

  let { selectFirstIfEmpty = false, minCharactersToSearch = 1, maxItemsToShowInList = 0, noResultsText = "No results found" } = $$props;

  const uniqueId = "sautocomplete-" + Math.floor(Math.random() * 1000);

  function safeLabelFunction(item) {
    // console.log("labelFunction: " + labelFunction);
    // console.log("safeLabelFunction, item: " + item);
    return safeStringFunction(labelFunction, item);
  }

  function safeKeywordsFunction(item) {
    // console.log("safeKeywordsFunction");
    const keywords = safeStringFunction(keywordsFunction, item);
    let result = safeStringFunction(keywordsCleanFunction, keywords);
    result = result.toLowerCase().trim();
    if (debug) {
      console.log(
        "Extracted keywords: '" +
          result +
          "' from item: " +
          JSON.stringify(item)
      );
    }
    return result;
  }

  // the text displayed when no option is selected
  let { placeholder = undefined, className = undefined, name = undefined, disabled = false, title = undefined, debug = false, selectedItem = undefined, value = undefined } = $$props;
  let text;
  let filteredTextLength = 0;

  function onSelectedItemChanged() {
    $$invalidate('value', value = valueFunction(selectedItem));
    $$invalidate('text', text = safeLabelFunction(selectedItem));
    onChange(selectedItem);
  }

  // HTML elements
  let input;
  let list;

  // UI state
  let opened = false;
  let highlightIndex = -1;

  // view model
  let filteredListItems;

  let listItems = [];

  function prepareListItems() {
    let tStart;
    if (debug) {
      tStart = performance.now();
      console.log("prepare items to search");
      console.log("items: " + JSON.stringify(items));
    }
    const length = items ? items.length : 0;
    listItems = new Array(length);

    if (length > 0) {
      items.forEach((item, i) => {
        listItems[i] = getListItem(item);
      });
    }

    if (debug) {
      const tEnd = performance.now();
      console.log(
        listItems.length +
          " items to search prepared in " +
          (tEnd - tStart) +
          " milliseconds"
      );
    }
  }

  function getListItem(item) {
    return {
      // keywords representation of the item
      keywords: safeKeywordsFunction(item),
      // item label
      label: safeLabelFunction(item),
      // store reference to the origial item
      item: item
    };
  }

  function prepareUserEnteredText(userEnteredText) {
    if (userEnteredText === undefined || userEnteredText === null) {
      return "";
    }

    const textFiltered = userEnteredText
      .replace(/[&/\\#,+()$~%.'":*?<>{}]/g, " ")
      .trim();

    filteredTextLength = textFiltered.length;

    if (minCharactersToSearch > 1) {
      if (filteredTextLength < minCharactersToSearch) {
        return "";
      }
    }

    const cleanUserEnteredText = textCleanFunction(textFiltered);
    const textFilteredLowerCase = cleanUserEnteredText.toLowerCase().trim();

    if (debug) {
      console.log(
        "Change user entered text '" +
          userEnteredText +
          "' into '" +
          textFilteredLowerCase +
          "'"
      );
    }
    return textFilteredLowerCase;
  }

  function search() {
    let tStart;
    if (debug) {
      tStart = performance.now();
      console.log("Searching user entered text: '" + text + "'");
    }

    const textFiltered = prepareUserEnteredText(text);

    if (textFiltered === "") {
      $$invalidate('filteredListItems', filteredListItems = listItems);
      closeIfMinCharsToSearchReached();
      if (debug) {
        console.log(
          "User entered text is empty set the list of items to all items"
        );
      }
      return;
    }

    const searchWords = textFiltered.split(" ");

    let tempfilteredListItems = listItems.filter(listItem => {
      const itemKeywords = listItem.keywords;

      let matches = 0;
      searchWords.forEach(searchWord => {
        if (itemKeywords.includes(searchWord)) {
          matches++;
        }
      });

      return matches >= searchWords.length;
    });

    const hlfilter = highlightFilter(textFiltered, ["label"]);
    const filteredListItemsHighlighted = tempfilteredListItems.map(hlfilter);

    $$invalidate('filteredListItems', filteredListItems = filteredListItemsHighlighted);
    closeIfMinCharsToSearchReached();
    if (debug) {
      const tEnd = performance.now();
      console.log(
        "Search took " +
          (tEnd - tStart) +
          " milliseconds, found " +
          filteredListItems.length +
          " items"
      );
    }
  }

  // $: text, search();

  function selectListItem(listItem) {
    if (debug) {
      console.log("selectListItem");
    }
    const newSelectedItem = listItem.item;
    if (beforeChange(selectedItem, newSelectedItem)) {
      $$invalidate('selectedItem', selectedItem = newSelectedItem);
    }
  }

  function selectItem() {
    if (debug) {
      console.log("selectItem");
    }
    const listItem = filteredListItems[highlightIndex];
    selectListItem(listItem);
    close();
  }

  function up() {
    if (debug) {
      console.log("up");
    }

    open();
    if (highlightIndex > 0) $$invalidate('highlightIndex', highlightIndex--, highlightIndex);
    highlight();
  }

  function down() {
    if (debug) {
      console.log("down");
    }

    open();
    if (highlightIndex < filteredListItems.length - 1) $$invalidate('highlightIndex', highlightIndex++, highlightIndex);
    highlight();
  }

  function highlight() {
    if (debug) {
      console.log("highlight");
    }

    const query = ".selected";
    if (debug) {
      console.log("Seaching DOM element: " + query + " in " + list);
    }
    const el = list.querySelector(query);
    if (el) {
      if (typeof el.scrollIntoViewIfNeeded === "function") {
        if (debug) {
          console.log("Scrolling selected item into view");
        }
        el.scrollIntoViewIfNeeded();
      } else {
        if (debug) {
          console.warn(
            "Could not scroll selected item into view, scrollIntoViewIfNeeded not supported"
          );
        }
      }
    } else {
      if (debug) {
        console.warn("Selected item not found to scroll into view");
      }
    }
  }

  function onListItemClick(listItem) {
    if (debug) {
      console.log("onListItemClick");
    }

    selectListItem(listItem);
    close();
  }

  function onDocumentClick(e) {
    if (debug) {
      console.log("onDocumentClick: " + JSON.stringify(e.target));
    }
    if (e.target.closest("." + uniqueId)) {
      if (debug) {
        console.log("onDocumentClick inside");
      }
      // resetListToAllItemsAndOpen();
      highlight();
    } else {
      if (debug) {
        console.log("onDocumentClick outside");
      }
      close();
    }
  }

  function onKeyDown(e) {
    if (debug) {
      console.log("onKeyDown");
    }

    let key = e.key;
    if (key === "Tab" && e.shiftKey) key = "ShiftTab";
    const fnmap = {
      Tab: opened ? down.bind(this) : null,
      ShiftTab: opened ? up.bind(this) : null,
      ArrowDown: down.bind(this),
      ArrowUp: up.bind(this),
      Escape: onEsc.bind(this)
    };
    const fn = fnmap[key];
    if (typeof fn === "function") {
      e.preventDefault();
      fn(e);
    }
  }

  function onKeyPress(e) {
    if (debug) {
      console.log("onKeyPress");
    }

    if (e.key === "Enter") {
      e.preventDefault();
      selectItem();
    }
  }

  function onInput(e) {
    if (debug) {
      console.log("onInput");
    }

    $$invalidate('text', text = e.target.value);
    search();
    $$invalidate('highlightIndex', highlightIndex = 0);
    open();
  }

  function onInputClick() {
    if (debug) {
      console.log("onInputClick");
    }
    resetListToAllItemsAndOpen();
  }

  function onEsc(e) {
    if (debug) {
      console.log("onEsc");
    }

    //if (text) return clear();
    e.stopPropagation();
    if (opened) {
      input.focus();
      close();
    }
  }

  function onFocus() {
    if (debug) {
      console.log("onFocus");
    }

    resetListToAllItemsAndOpen();
  }

  function resetListToAllItemsAndOpen() {
    if (debug) {
      console.log("resetListToAllItemsAndOpen");
    }

    $$invalidate('filteredListItems', filteredListItems = listItems);

    open();

    // find selected item
    if (selectedItem) {
      if (debug) {
        console.log(
          "Searching currently selected item: " + JSON.stringify(selectedItem)
        );
      }
      for (let i = 0; i < listItems.length; i++) {
        const listItem = listItems[i];
        if (debug) {
          console.log("Item " + i + ": " + JSON.stringify(listItem));
        }
        if (selectedItem == listItem.item) {
          $$invalidate('highlightIndex', highlightIndex = i);
          if (debug) {
            console.log(
              "Found selected item: " + i + ": " + JSON.stringify(listItem)
            );
          }
          highlight();
          break;
        }
      }
    }
  }

  function open() {
    if (debug) {
      console.log("open");
    }

    // check if the search text has more than the min chars required
    if (isMinCharsToSearchReached()) {
      return;
    }

    $$invalidate('opened', opened = true);
  }

  function close() {
    if (debug) {
      console.log("close");
    }
    $$invalidate('opened', opened = false);

    if (!text && selectFirstIfEmpty) {
      highlightFilter = 0;
      selectItem();
    }
  }

  function isMinCharsToSearchReached() {
    return (
      minCharactersToSearch > 1 && filteredTextLength < minCharactersToSearch
    );
  }

  function closeIfMinCharsToSearchReached() {
    if (isMinCharsToSearchReached()) {
      close();
    }
  }
  // 'item number one'.replace(/(it)(.*)(nu)(.*)(one)/ig, '<b>$1</b>$2 <b>$3</b>$4 <b>$5</b>')
  function highlightFilter(q, fields) {
    const qs = "(" + q.trim().replace(/\s/g, ")(.*)(") + ")";
    const reg = new RegExp(qs, "ig");
    let n = 1;
    const len = qs.split(")(").length + 1;
    let repl = "";
    for (; n < len; n++) repl += n % 2 ? `<b>$${n}</b>` : `$${n}`;

    return i => {
      const newI = Object.assign({ highlighted: {} }, i);
      if (fields) {
        fields.forEach(f => {
          if (!newI[f]) return;
          newI.highlighted[f] = newI[f].replace(reg, repl);
        });
      }
      return newI;
    };
  }

	function input_1_input_handler() {
		text = this.value;
		$$invalidate('text', text);
	}

	function input_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('input', input = $$value);
		});
	}

	const click_handler = ({ listItem }) => onListItemClick(listItem);

	function div0_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			$$invalidate('list', list = $$value);
		});
	}

	$$self.$set = $$props => {
		if ('items' in $$props) $$invalidate('items', items = $$props.items);
		if ('labelFieldName' in $$props) $$invalidate('labelFieldName', labelFieldName = $$props.labelFieldName);
		if ('keywordsFieldName' in $$props) $$invalidate('keywordsFieldName', keywordsFieldName = $$props.keywordsFieldName);
		if ('valueFieldName' in $$props) $$invalidate('valueFieldName', valueFieldName = $$props.valueFieldName);
		if ('labelFunction' in $$props) $$invalidate('labelFunction', labelFunction = $$props.labelFunction);
		if ('keywordsFunction' in $$props) $$invalidate('keywordsFunction', keywordsFunction = $$props.keywordsFunction);
		if ('valueFunction' in $$props) $$invalidate('valueFunction', valueFunction = $$props.valueFunction);
		if ('keywordsCleanFunction' in $$props) $$invalidate('keywordsCleanFunction', keywordsCleanFunction = $$props.keywordsCleanFunction);
		if ('textCleanFunction' in $$props) $$invalidate('textCleanFunction', textCleanFunction = $$props.textCleanFunction);
		if ('beforeChange' in $$props) $$invalidate('beforeChange', beforeChange = $$props.beforeChange);
		if ('onChange' in $$props) $$invalidate('onChange', onChange = $$props.onChange);
		if ('selectFirstIfEmpty' in $$props) $$invalidate('selectFirstIfEmpty', selectFirstIfEmpty = $$props.selectFirstIfEmpty);
		if ('minCharactersToSearch' in $$props) $$invalidate('minCharactersToSearch', minCharactersToSearch = $$props.minCharactersToSearch);
		if ('maxItemsToShowInList' in $$props) $$invalidate('maxItemsToShowInList', maxItemsToShowInList = $$props.maxItemsToShowInList);
		if ('noResultsText' in $$props) $$invalidate('noResultsText', noResultsText = $$props.noResultsText);
		if ('placeholder' in $$props) $$invalidate('placeholder', placeholder = $$props.placeholder);
		if ('className' in $$props) $$invalidate('className', className = $$props.className);
		if ('name' in $$props) $$invalidate('name', name = $$props.name);
		if ('disabled' in $$props) $$invalidate('disabled', disabled = $$props.disabled);
		if ('title' in $$props) $$invalidate('title', title = $$props.title);
		if ('debug' in $$props) $$invalidate('debug', debug = $$props.debug);
		if ('selectedItem' in $$props) $$invalidate('selectedItem', selectedItem = $$props.selectedItem);
		if ('value' in $$props) $$invalidate('value', value = $$props.value);
	};

	$$self.$$.update = ($$dirty = { selectedItem: 1, items: 1 }) => {
		if ($$dirty.selectedItem) { onSelectedItemChanged(); }
		if ($$dirty.items) { prepareListItems(); }
	};

	return {
		items,
		labelFieldName,
		keywordsFieldName,
		valueFieldName,
		labelFunction,
		keywordsFunction,
		valueFunction,
		keywordsCleanFunction,
		textCleanFunction,
		beforeChange,
		onChange,
		selectFirstIfEmpty,
		minCharactersToSearch,
		maxItemsToShowInList,
		noResultsText,
		uniqueId,
		placeholder,
		className,
		name,
		disabled,
		title,
		debug,
		selectedItem,
		value,
		text,
		input,
		list,
		opened,
		highlightIndex,
		filteredListItems,
		onListItemClick,
		onDocumentClick,
		onKeyDown,
		onKeyPress,
		onInput,
		onInputClick,
		onFocus,
		input_1_input_handler,
		input_1_binding,
		click_handler,
		div0_binding
	};
}

class SimpleAutocomplete extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-gfsz5d-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, ["items", "labelFieldName", "keywordsFieldName", "valueFieldName", "labelFunction", "keywordsFunction", "valueFunction", "keywordsCleanFunction", "textCleanFunction", "beforeChange", "onChange", "selectFirstIfEmpty", "minCharactersToSearch", "maxItemsToShowInList", "noResultsText", "placeholder", "className", "name", "disabled", "title", "debug", "selectedItem", "value"]);
	}
}

export default SimpleAutocomplete;
